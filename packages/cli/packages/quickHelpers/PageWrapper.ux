<template>
  <div class="pagewrapper" style="padding-bottom: {{tabBar.list.length?'150px': '0px'}}">
    <refresh refreshing="{{refreshing}}" @refresh="onPullDownRefresh">
      <list @scroll="onPageScroll" @scrollbottom="onReachBottom">
        <list-item type='a' >
          <slot></slot>
        </list-item>
      </list>
    </refresh>
    <div class="tabBar" if="{{tabBar.list.length}}" style="background-color:{{tabBar.backgroundColor}}">
      <div class="tab" for="(index, item) in tabBar.list" @click="onSelected(item)">
        <image src="{{ currentPath === item.pagePath ? item.selectedIconPath : item.iconPath }}" />
        <text style="color:{{ currentPath === item.pagePath ? tabBar.selectedColor: tabBar.color }}">
          {{item.text}}
        </text>
      </div>
    </div>
  </div>
</template>
<style lang="sass">
  .pagewrapper {
    flex: 1;
    flex-direction: column;
    width: 100%;
  }

  .tabBar {
    position: fixed;
    bottom: 0;
    width: 100%;
    height: 150px;
  }

  .tabBar .tab {
    flex: 1;
    margin: 10px;
    flex-direction: column;
    justify-content: center;
    align-items: center;
  }

  .tabBar .tab image {
    width: 60px;
    height: 60px;
  }

  .tabBar .tab a {
    margin: 10px;
    border: 1px solid #eeeeee;
  }
</style>
<script>
  import React from '../../ReactQuick.js';
  var { shareObject, getApp } = React
  export default {
    props: {
      tabBar: Object,
      refreshing: Boolean,
      currentPath: String
    },
    onReady() {
    },
    onInit() {
      this.tabBar = {
        list: []
      }
      setTitleAndTabs(this);
    },
    onShow() {
      setTitleAndTabs(this);
    },
    onReachBottom() {
      var cc = shareObject.page;
      if (cc.onReachBottom) {
        cc.onReachBottom(e)
      }
      React.api.showToast({ title: 'reach bottom' });
    },
    onPageScroll(e) {
      var cc = shareObject.page;
      if (cc.onPageScroll) {
        cc.onPageScroll(e)
      }
    },
    onSelected(item) {

      console.log("pageWraper onSelected", item.pagePath)
      this.currentPath = item.pagePath;
      //this.selectedIndex = index;
      var page = shareObject.page;
      if (page.onTabItemTap) {
        page.onTabItemTap(item)
      }
      React.api.navigateTo({
        url: item.pagePath
      })
    },
    onPullDownRefresh() {
      var app = getApp()
      var cc = shareObject.pageConfig || app.config
      var page = shareObject.page;
      if (cc.enablePullDownRefresh && page.onPullDownRefresh) {
        page.onPullDownRefresh()
        React.api.showToast({ title: 'refreshed' });
      }
      this.refreshing = true
      setTimeout(() => {
        this.refreshing = false
      })
    }
  };

  function setTitleAndTabs(instance) {
    var app = getApp()
    instance.currentPath = shareObject.pagePath.replace(/\/index$/, "")
    var cc = shareObject.pageConfig || app.config
    if (cc) {
      cc.titleBar = {
        text: cc.navigationBarTitleText || "",
        textColor: cc.navigationBarTextStyle || "white",
        backgroundColor: cc.navigationBarBackgroundColor || "#000",
        menu: true
      }
      instance.$page.setTitleBar(cc.titleBar)
      var tabBar = cc.tabBar;
      if (tabBar && tabBar.list && tabBar.list.length) {
        tabBar.backgroundColor = tabBar.backgroundColor || "#f9faf5";
        tabBar.color = tabBar.color || "#000";
        tabBar.selectedColor = tabBar.selectedColor || "#48adc4";
        instance.tabBar = tabBar;
      }
    }
  }
</script>